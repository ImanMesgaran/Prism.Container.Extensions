trigger:
  batch: true
  branches:
    include:
    - master
  paths:
    exclude:
    - README.md
    - .editorconfig
    - .gitignore

pr:
  branches:
    include:
    - master
  paths:
    exclude:
    - README.md
    - .editorconfig
    - .gitignore

name: $(Build.BuildId)

variables:
- name: VMImage
  value: 'windows-2019'
- group: 'Code Signing'
- group: 'GitHub Release'

stages:
- stage: build
  displayName: Build NuGet Packages
  jobs:
  - job: buildJob
    displayName: Build Container Extensions
    pool:
      vmImage: $(VMImage)
      demands:
      - MSBuild
    steps:
    - task: NuGetToolInstaller@0
      displayName: Install Latest NuGet
      inputs:
        versionSpec: 4.9.4
    - task: NuGetCommand@2
      displayName: NuGet Restore
      inputs:
        noCache: true
    - task: MSBuild@1
      displayName: Build Projects
      inputs:
        configuration: Release
        msbuildArguments: '/p:DebugType=portable'
    - powershell: ./Sign-Packages.ps1
      workingDirectory: build
      displayName: Authenticode Sign Artifacts
      env:
        SignClientUser: $(SignClientUser)
        SignClientSecret: $(SignClientSecret)
        SignClientClientId: $(SignClientClientId)
        SignClientTenantId: $(SignClientTenantId)
        SignServiceResourceId: $(SignServiceResourceId)
      condition: and(succeeded(), eq(variables['system.pullrequest.isfork'], false))
    - task: PublishPipelineArtifact@0
      displayName: Publish Artifacts
      inputs:
        artifactName: NuGet
        targetPath: $(Build.ArtifactStagingDirectory)
- stage: deploy
  displayName: Deploy NuGets
  jobs:
  - job: ProcessDeployment
    pool:
      vmImage: $(VMImage)
    steps:
    - task: DownloadPipelineArtifact@1
      inputs:
        artifactName: 'NuGet'
        downloadPath: $(Pipeline.Workspace)
    - powershell: $(System.DefaultWorkingDirectory)/build/Process-Release.ps1
      workingDirectory: $(Pipeline.Workspace)
      displayName: Process Artifacts for Release
  - deployment: MyGet
    displayName: MyGet.org
    environment: MyGet
    strategy:
      runOnce:
        deploy:
          steps:
          - task: NuGetCommand@2
            displayName: NuGet Push
            inputs:
              command: push
              packagesToPush: '$(Pipeline.Workspace)/**/*.nupkg'
              nuGetFeedType: external
              publishFeedCredentials: 'Prism.Plugins - MyGet'
  - deployment: NuGet
    displayName: NuGet.org
    environment: NuGet
    dependsOn: ProcessDeployment
    condition: and(succeeded(), eq(variables['DeployToNuGet'], 'true'))
    strategy:
      runOnce:
        deploy:
          steps:
          - task: jakobehn.jakobehn-vsts-github-tasks.publish-github-release.PublishGitHubRelease@0
            displayName: 'Publish GitHub Release'
            inputs:
              applicationName: AzureDevOps
              token: '$(GitHubToken)'
              repo: Prism.Container.Extensions
              owner: dansiegel
              tagName: 'v$(VersionName)'
              releaseName: '$(ReleaseDisplayName)'
              prerelease: $(IsPreview)
              assetsPattern: '$(Pipeline.Workspace)/**/*.nupkg'
          - task: NuGetCommand@2
            displayName: NuGet Push
            inputs:
              command: push
              packagesToPush: '$(Pipeline.Workspace)/**/*.nupkg;$(Pipeline.Workspace)/**/*.symbols.nupkg'
              nuGetFeedType: external
              publishFeedCredentials: 'NuGet'
